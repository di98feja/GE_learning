# MIT License
#
# Copyright (c) 2021-2022 Reik Steinert
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

power_sensors:
  sensor:
    - platform: template
      sensors:
        power_consumption:
          friendly_name: "Power Consumption"
          value_template: >
            {{ states('sensor.momentary_active_import') | int(0) -
               states('sensor.momentary_active_export') | int(0) +
               states('sensor.solax1_ac_power') | int(0) }}
          unit_of_measurement: "W"

        battery_charge_power:
          friendly_name: "Battery Charge Power"
          value_template: >
            {% if states('sensor.solax1_battery_power') | int(0) > 10 %}
              {{ states('sensor.solax1_battery_power') | int(0) }}
            {% else %}
              0
            {% endif %}
          unit_of_measurement: "W"

        battery_discharge_power:
          friendly_name: "Battery Discharge Power"
          value_template: >
            {% if states('sensor.solax1_battery_power') | int(0) < -10 %}
              {{ 0 - states('sensor.solax1_battery_power') | int(0) }}
            {% else %}
              0
            {% endif %}
          unit_of_measurement: "W"

        #---------------------------------------------------------------

        inverter_power:
          friendly_name: "Inverter Power"
          value_template: >
            {{ states('sensor.solax_pv_power_total') | int(0) -
               states('sensor.solax1_battery_power') | int(0) +
               states("sensor.solax1_ac_power") | int(0) }}
          unit_of_measurement: "W"

        #---------------------------------------------------------------

        momentary_active_import:
          friendly_name: "Momentary Active Import"
          value_template: >
            {% if states('sensor.solax1_grid_power') | int(0) < -10 %}
              {{ 0 - states('sensor.solax1_grid_power') | int(0) }}
            {% else %}
              0
            {% endif %}
          unit_of_measurement: "W"

        momentary_active_export:
          friendly_name: "Momentary Active Export"
          value_template: >
            {% if states('sensor.solax1_grid_power') | int(0) > 10 %}
              {{ states('sensor.solax1_grid_power') | int(0) }}
            {% else %}
              0
            {% endif %}
          unit_of_measurement: "W"

        #---------------------------------------------------------------
        # float(3600) below is used to prohibit the inverter from increasing the current in case the sensor value is unknown.
        # The current wil instead go to 0 A.
        grid_current_phase_1:
          friendly_name: "Grid Current Phase 1"
          value_template: "{{ ((0 - states('sensor.solax1_l1_feed_in_power') | float(3600)) / states('sensor.solax1_l1_voltage') | float(1)) | round(1) }}"
          unit_of_measurement: "A"
          availability_template: "{{ states('sensor.solax1_l1_voltage') | float(0) != 0 }}"

        grid_current_phase_2:
          friendly_name: "Grid Current Phase 2"
          value_template: "{{ ((0 - states('sensor.solax1_l2_feed_in_power') | float(3600)) / states('sensor.solax1_l2_voltage') | float(1)) | round(1) }}"
          unit_of_measurement: "A"
          availability_template: "{{ states('sensor.solax1_l2_voltage') | float(0) != 0 }}"

        grid_current_phase_3:
          friendly_name: "Grid Current Phase 3"
          value_template: "{{ ((0 - states('sensor.solax1_l3_feed_in_power') | float(3600)) / states('sensor.solax1_l3_voltage') | float(1)) | round(1) }}"
          unit_of_measurement: "A"
          availability_template: "{{ states('sensor.solax1_l3_voltage') | float(0) != 0 }}"

        #---------------------------------------------------------------

        sun_elevation:
          friendly_name: "Sun Elevation"
          value_template: >
            {% if state_attr('sun.sun', 'elevation') | float(0) >= 0 %}
                {{ state_attr('sun.sun', 'elevation') | float(0) }}
            {% else %}
                0
            {% endif %}

        sun_azimuth:
          friendly_name: "Sun Azimuth"
          value_template: "{{ state_attr('sun.sun', 'azimuth') | float(0) }}"
