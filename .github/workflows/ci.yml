name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  PYTHON_VERSION: "3.11"

jobs:
  lint-and-test:
    runs-on: ubuntu-latest
    name: Lint and Test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install homeassistant

    - name: Lint with black
      run: |
        black --check --diff custom_components/

    - name: Sort imports with isort
      run: |
        isort --check-only --diff custom_components/

    - name: Type check with mypy
      run: |
        mypy custom_components/gridenforcer/

    - name: Run tests
      run: |
        pytest tests/ -v --cov=custom_components/gridenforcer --cov-report=xml

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  validate-integration:
    runs-on: ubuntu-latest
    name: Validate Home Assistant Integration
    needs: lint-and-test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Validate integration with HACS
      run: |
        # Validate HACS compatibility
        python -m pip install --upgrade pip
        pip install homeassistant
        python -c "
        import json
        import sys
        from pathlib import Path
        
        manifest_path = Path('custom_components/gridenforcer/manifest.json')
        if not manifest_path.exists():
            print('❌ manifest.json not found')
            sys.exit(1)
            
        with open(manifest_path) as f:
            manifest = json.load(f)
            
        required_keys = ['domain', 'name', 'version', 'requirements', 'codeowners']
        missing_keys = [key for key in required_keys if key not in manifest]
        
        if missing_keys:
            print(f'❌ Missing required keys in manifest.json: {missing_keys}')
            sys.exit(1)
            
        print('✅ manifest.json validation passed')
        "

    - name: Check component structure
      run: |
        # Validate component structure
        python -c "
        import sys
        from pathlib import Path
        
        component_path = Path('custom_components/gridenforcer')
        required_files = ['__init__.py', 'manifest.json']
        
        missing_files = []
        for file in required_files:
            if not (component_path / file).exists():
                missing_files.append(file)
                
        if missing_files:
            print(f'❌ Missing required files: {missing_files}')
            sys.exit(1)
            
        print('✅ Component structure validation passed')
        "

  build-and-test-docker:
    runs-on: ubuntu-latest
    name: Build and Test Docker Image
    needs: validate-integration
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Create minimal config structure
      run: |
        mkdir -p config
        mkdir -p custom_components/gridenforcer
        
        # Create minimal configuration.yaml
        cat > config/configuration.yaml << EOF
        homeassistant:
          name: Test
          latitude: 59.3293
          longitude: 18.0686
          elevation: 0
          unit_system: metric
          time_zone: Europe/Stockholm
          
        http:
          use_x_forwarded_for: true
          trusted_proxies:
            - 127.0.0.1
            
        logger:
          default: info
          
        # Grid Enforcer Integration
        gridenforcer:
          # Test configuration will be added during integration development
        EOF

    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: false
        tags: grid-enforcer-ha:test
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Test Docker container startup
      run: |
        # Start the container
        docker run -d --name ha-test \
          -v $(pwd)/config:/config \
          -v $(pwd)/custom_components:/config/custom_components \
          grid-enforcer-ha:test

        # Wait for startup
        echo "Waiting for Home Assistant to start..."
        for i in {1..30}; do
          if docker exec ha-test curl -f http://localhost:8123/api/ 2>/dev/null; then
            echo "✅ Home Assistant started successfully"
            break
          fi
          if [ $i -eq 30 ]; then
            echo "❌ Home Assistant failed to start within timeout"
            docker logs ha-test
            exit 1
          fi
          sleep 2
        done

        # Check if our integration is loaded
        docker exec ha-test python -c "
        import asyncio
        import aiohttp
        
        async def check_integration():
            async with aiohttp.ClientSession() as session:
                # Check if the integration endpoint exists
                # This is a basic check - more comprehensive tests will be added
                async with session.get('http://localhost:8123/api/') as resp:
                    if resp.status == 200:
                        print('✅ API accessible')
                    else:
                        print(f'❌ API returned status {resp.status}')
                        
        asyncio.run(check_integration())
        " || echo "⚠️  Integration-specific tests will be added during development"

        # Clean up
        docker stop ha-test
        docker rm ha-test

  security-scan:
    runs-on: ubuntu-latest
    name: Security Scan
    needs: lint-and-test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  integration-test:
    runs-on: ubuntu-latest
    name: Integration Tests
    needs: build-and-test-docker
    if: github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Start test environment
      run: |
        # Create test environment with docker-compose
        mkdir -p mosquitto/config mosquitto/data mosquitto/log
        
        # Create mosquitto config
        cat > mosquitto/config/mosquitto.conf << EOF
        listener 1883
        allow_anonymous true
        persistence true
        persistence_location /mosquitto/data/
        log_dest file /mosquitto/log/mosquitto.log
        EOF

        # Start services
        docker-compose up -d --profile mqtt
        
        # Wait for services to be ready
        sleep 10

    - name: Run integration tests
      run: |
        # These will be actual integration tests once the component is developed
        echo "🧪 Running integration tests..."
        
        # Test MQTT connectivity
        docker exec mosquitto-dev mosquitto_pub -h localhost -t "test/topic" -m "test message"
        
        # Verify Home Assistant can connect to MQTT
        # (This test will be expanded during development)
        
        echo "✅ Basic integration tests passed"

    - name: Cleanup test environment
      if: always()
      run: |
        docker-compose down -v

  deploy-staging:
    runs-on: ubuntu-latest
    name: Deploy to Staging
    needs: [integration-test, security-scan]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to staging environment
      run: |
        echo "🚀 Deploying to staging environment..."
        # Staging deployment logic will be added based on infrastructure setup
        echo "✅ Staged deployment completed"

  deploy-production:
    runs-on: ubuntu-latest
    name: Deploy to Production
    needs: [integration-test, security-scan]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to production environment
      run: |
        echo "🚀 Deploying to production environment..."
        # Production deployment logic will be added based on infrastructure setup
        echo "✅ Production deployment completed"